Qflow synthesis logfile created on Wed Jul 2 05:12:45 PM IST 2025
Running yosys for verilog parsing and synthesis
yosys  -s aluuu.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `aluuu.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/kor-tac/Desktop/physical/alu/source/aluuu.v
Parsing Verilog input from `/home/kor-tac/Desktop/physical/alu/source/aluuu.v' to AST representation.
Generating RTLIL representation for module `\ha'.
Generating RTLIL representation for module `\fa1'.
Generating RTLIL representation for module `\multi_10'.
/home/kor-tac/Desktop/physical/alu/source/aluuu.v:41: Warning: Identifier `\p' is implicitly declared.
Generating RTLIL representation for module `\adder_10'.
Generating RTLIL representation for module `\sub_10'.
Generating RTLIL representation for module `\comp_10'.
Generating RTLIL representation for module `\adie'.
Generating RTLIL representation for module `\orie'.
Generating RTLIL representation for module `\arilef'.
Generating RTLIL representation for module `\aririi'.
Generating RTLIL representation for module `\aluuu'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \aluuu
Used module:     \aririi
Used module:     \arilef
Used module:     \orie
Used module:     \adie
Used module:     \comp_10
Used module:     \sub_10
Used module:         \fa1
Used module:             \ha
Used module:     \adder_10
Used module:     \multi_10

3.1.2. Analyzing design hierarchy..
Top module:  \aluuu
Used module:     \aririi
Used module:     \arilef
Used module:     \orie
Used module:     \adie
Used module:     \comp_10
Used module:     \sub_10
Used module:         \fa1
Used module:             \ha
Used module:     \adder_10
Used module:     \multi_10
Removed 0 unused modules.
Mapping positional arguments of cell aluuu.aR1 (aririi).
Mapping positional arguments of cell aluuu.aL1 (arilef).
Mapping positional arguments of cell aluuu.on (orie).
Mapping positional arguments of cell aluuu.an (adie).
Mapping positional arguments of cell aluuu.c1 (comp_10).
Mapping positional arguments of cell aluuu.ss1 (sub_10).
Mapping positional arguments of cell aluuu.a1 (adder_10).
Mapping positional arguments of cell aluuu.m1 (multi_10).
Mapping positional arguments of cell sub_10.f9 (fa1).
Mapping positional arguments of cell sub_10.f8 (fa1).
Mapping positional arguments of cell sub_10.f7 (fa1).
Mapping positional arguments of cell sub_10.f6 (fa1).
Mapping positional arguments of cell sub_10.f5 (fa1).
Mapping positional arguments of cell sub_10.f4 (fa1).
Mapping positional arguments of cell sub_10.f3 (fa1).
Mapping positional arguments of cell sub_10.f2 (fa1).
Mapping positional arguments of cell sub_10.f1 (fa1).
Mapping positional arguments of cell sub_10.f0 (fa1).
Mapping positional arguments of cell adder_10.f9 (fa1).
Mapping positional arguments of cell adder_10.f8 (fa1).
Mapping positional arguments of cell adder_10.f7 (fa1).
Mapping positional arguments of cell adder_10.f6 (fa1).
Mapping positional arguments of cell adder_10.f5 (fa1).
Mapping positional arguments of cell adder_10.f4 (fa1).
Mapping positional arguments of cell adder_10.f3 (fa1).
Mapping positional arguments of cell adder_10.f2 (fa1).
Mapping positional arguments of cell adder_10.f1 (fa1).
Mapping positional arguments of cell adder_10.f0 (fa1).
Mapping positional arguments of cell multi_10.h18 (fa1).
Mapping positional arguments of cell multi_10.f74 (fa1).
Mapping positional arguments of cell multi_10.f73 (fa1).
Mapping positional arguments of cell multi_10.f72 (fa1).
Mapping positional arguments of cell multi_10.f71 (fa1).
Mapping positional arguments of cell multi_10.f70 (fa1).
Mapping positional arguments of cell multi_10.f69 (fa1).
Mapping positional arguments of cell multi_10.f68 (fa1).
Mapping positional arguments of cell multi_10.f67 (fa1).
Mapping positional arguments of cell multi_10.h17 (ha).
Mapping positional arguments of cell multi_10.h16 (fa1).
Mapping positional arguments of cell multi_10.f66 (fa1).
Mapping positional arguments of cell multi_10.f65 (fa1).
Mapping positional arguments of cell multi_10.f64 (fa1).
Mapping positional arguments of cell multi_10.f63 (fa1).
Mapping positional arguments of cell multi_10.f62 (fa1).
Mapping positional arguments of cell multi_10.f61 (fa1).
Mapping positional arguments of cell multi_10.f60 (fa1).
Mapping positional arguments of cell multi_10.f59 (fa1).
Mapping positional arguments of cell multi_10.h15 (ha).
Mapping positional arguments of cell multi_10.h14 (fa1).
Mapping positional arguments of cell multi_10.f58 (fa1).
Mapping positional arguments of cell multi_10.f57 (fa1).
Mapping positional arguments of cell multi_10.f56 (fa1).
Mapping positional arguments of cell multi_10.f53 (fa1).
Mapping positional arguments of cell multi_10.f52 (fa1).
Mapping positional arguments of cell multi_10.f51 (fa1).
Mapping positional arguments of cell multi_10.f50 (fa1).
Mapping positional arguments of cell multi_10.f49 (fa1).
Mapping positional arguments of cell multi_10.h13 (ha).
Mapping positional arguments of cell multi_10.h12 (fa1).
Mapping positional arguments of cell multi_10.f48 (fa1).
Mapping positional arguments of cell multi_10.f47 (fa1).
Mapping positional arguments of cell multi_10.f46 (fa1).
Mapping positional arguments of cell multi_10.f45 (fa1).
Mapping positional arguments of cell multi_10.f44 (fa1).
Mapping positional arguments of cell multi_10.f43 (fa1).
Mapping positional arguments of cell multi_10.f42 (fa1).
Mapping positional arguments of cell multi_10.f41 (fa1).
Mapping positional arguments of cell multi_10.h11 (ha).
Mapping positional arguments of cell multi_10.h10 (fa1).
Mapping positional arguments of cell multi_10.f40 (fa1).
Mapping positional arguments of cell multi_10.f39 (fa1).
Mapping positional arguments of cell multi_10.f38 (fa1).
Mapping positional arguments of cell multi_10.f37 (fa1).
Mapping positional arguments of cell multi_10.f36 (fa1).
Mapping positional arguments of cell multi_10.f35 (fa1).
Mapping positional arguments of cell multi_10.f34 (fa1).
Mapping positional arguments of cell multi_10.f33 (fa1).
Mapping positional arguments of cell multi_10.h9 (ha).
Mapping positional arguments of cell multi_10.h8 (fa1).
Mapping positional arguments of cell multi_10.f32 (fa1).
Mapping positional arguments of cell multi_10.f31 (fa1).
Mapping positional arguments of cell multi_10.f30 (fa1).
Mapping positional arguments of cell multi_10.f29 (fa1).
Mapping positional arguments of cell multi_10.f28 (fa1).
Mapping positional arguments of cell multi_10.f27 (fa1).
Mapping positional arguments of cell multi_10.f26 (fa1).
Mapping positional arguments of cell multi_10.f25 (fa1).
Mapping positional arguments of cell multi_10.h7 (ha).
Mapping positional arguments of cell multi_10.h6 (fa1).
Mapping positional arguments of cell multi_10.f24 (fa1).
Mapping positional arguments of cell multi_10.f23 (fa1).
Mapping positional arguments of cell multi_10.f22 (fa1).
Mapping positional arguments of cell multi_10.f21 (fa1).
Mapping positional arguments of cell multi_10.f20 (fa1).
Mapping positional arguments of cell multi_10.f19 (fa1).
Mapping positional arguments of cell multi_10.f18 (fa1).
Mapping positional arguments of cell multi_10.f17 (fa1).
Mapping positional arguments of cell multi_10.h5 (ha).
Mapping positional arguments of cell multi_10.h4 (fa1).
Mapping positional arguments of cell multi_10.f16 (fa1).
Mapping positional arguments of cell multi_10.f15 (fa1).
Mapping positional arguments of cell multi_10.f14 (fa1).
Mapping positional arguments of cell multi_10.f13 (fa1).
Mapping positional arguments of cell multi_10.f12 (fa1).
Mapping positional arguments of cell multi_10.f11 (fa1).
Mapping positional arguments of cell multi_10.f10 (fa1).
Mapping positional arguments of cell multi_10.f9 (fa1).
Mapping positional arguments of cell multi_10.h3 (ha).
Mapping positional arguments of cell multi_10.h2 (ha).
Mapping positional arguments of cell multi_10.f8 (fa1).
Mapping positional arguments of cell multi_10.f7 (fa1).
Mapping positional arguments of cell multi_10.f6 (fa1).
Mapping positional arguments of cell multi_10.f5 (fa1).
Mapping positional arguments of cell multi_10.f4 (fa1).
Mapping positional arguments of cell multi_10.f3 (fa1).
Mapping positional arguments of cell multi_10.f2 (fa1).
Mapping positional arguments of cell multi_10.f1 (fa1).
Mapping positional arguments of cell multi_10.h1 (ha).
Mapping positional arguments of cell fa1.h2 (ha).
Mapping positional arguments of cell fa1.h1 (ha).
Warning: Resizing cell port aluuu.a1.sum from 10 bits to 11 bits.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/kor-tac/Desktop/physical/alu/source/aluuu.v:265$366 in module aluuu.
Marked 1 switch rules as full_case in process $proc$/home/kor-tac/Desktop/physical/alu/source/aluuu.v:265$366 in module aluuu.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\aluuu.$proc$/home/kor-tac/Desktop/physical/alu/source/aluuu.v:265$366'.
     1/1: $1\y[19:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\aluuu.\y' from process `\aluuu.$proc$/home/kor-tac/Desktop/physical/alu/source/aluuu.v:265$366'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\aluuu.$proc$/home/kor-tac/Desktop/physical/alu/source/aluuu.v:265$366'.
Removing empty process `aluuu.$proc$/home/kor-tac/Desktop/physical/alu/source/aluuu.v:265$366'.
Cleaned up 1 empty switch.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module aluuu.
<suppressed ~1 debug messages>
Optimizing module aririi.
<suppressed ~1 debug messages>
Optimizing module arilef.
<suppressed ~1 debug messages>
Optimizing module orie.
Optimizing module adie.
Optimizing module comp_10.
Optimizing module sub_10.
<suppressed ~1 debug messages>
Optimizing module adder_10.
Optimizing module multi_10.
Optimizing module fa1.
Optimizing module ha.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module aluuu.
Optimizing module aririi.
Optimizing module arilef.
Optimizing module orie.
Optimizing module adie.
Optimizing module comp_10.
Optimizing module sub_10.
Optimizing module adder_10.
Optimizing module multi_10.
Optimizing module fa1.
Optimizing module ha.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \sub_10..
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Removed 0 unused cells and 16 unused wires.
<suppressed ~10 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module adder_10...
Checking module adie...
Checking module aluuu...
Checking module arilef...
Checking module aririi...
Checking module comp_10...
Checking module fa1...
Checking module ha...
Checking module multi_10...
Checking module orie...
Checking module sub_10...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
<suppressed ~486 debug messages>
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 162 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aluuu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arilef..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aririi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fa1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multi_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \orie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_10.
  Optimizing cells in module \adie.
  Optimizing cells in module \aluuu.
  Optimizing cells in module \arilef.
  Optimizing cells in module \aririi.
  Optimizing cells in module \comp_10.
  Optimizing cells in module \fa1.
  Optimizing cells in module \ha.
  Optimizing cells in module \multi_10.
  Optimizing cells in module \orie.
  Optimizing cells in module \sub_10.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..
Removed 0 unused cells and 162 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aluuu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arilef..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aririi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fa1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multi_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \orie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_10.
  Optimizing cells in module \adie.
  Optimizing cells in module \aluuu.
  Optimizing cells in module \arilef.
  Optimizing cells in module \aririi.
  Optimizing cells in module \comp_10.
  Optimizing cells in module \fa1.
  Optimizing cells in module \ha.
  Optimizing cells in module \multi_10.
  Optimizing cells in module \orie.
  Optimizing cells in module \sub_10.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aluuu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arilef..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aririi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fa1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multi_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \orie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_10.
  Optimizing cells in module \adie.
  Optimizing cells in module \aluuu.
  Optimizing cells in module \arilef.
  Optimizing cells in module \aririi.
  Optimizing cells in module \comp_10.
  Optimizing cells in module \fa1.
  Optimizing cells in module \ha.
  Optimizing cells in module \multi_10.
  Optimizing cells in module \orie.
  Optimizing cells in module \sub_10.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell aluuu.$procmux$373_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell aluuu.$procmux$374_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell aluuu.$procmux$375_CMP0 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder_10:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module adie:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module aluuu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module arilef:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module aririi:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module comp_10:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module fa1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ha:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module multi_10:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module orie:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sub_10:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aluuu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arilef..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aririi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fa1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multi_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \orie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_10.
  Optimizing cells in module \adie.
  Optimizing cells in module \aluuu.
  Optimizing cells in module \arilef.
  Optimizing cells in module \aririi.
  Optimizing cells in module \comp_10.
  Optimizing cells in module \fa1.
  Optimizing cells in module \ha.
  Optimizing cells in module \multi_10.
  Optimizing cells in module \orie.
  Optimizing cells in module \sub_10.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
<suppressed ~1 debug messages>
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aluuu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arilef..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aririi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fa1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multi_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \orie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_10.
  Optimizing cells in module \adie.
  Optimizing cells in module \aluuu.
  Optimizing cells in module \arilef.
  Optimizing cells in module \aririi.
  Optimizing cells in module \comp_10.
  Optimizing cells in module \fa1.
  Optimizing cells in module \ha.
  Optimizing cells in module \multi_10.
  Optimizing cells in module \orie.
  Optimizing cells in module \sub_10.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$43fa60c46e83442767389184ae02572e3838275f\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~324 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
<suppressed ~153 debug messages>
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
<suppressed ~36 debug messages>
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 12 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..
Removed 0 unused cells and 125 unused wires.
<suppressed ~1 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\adder_10' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.2. Extracting gate netlist of module `\adie' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 30 wires to a netlist network with 20 inputs and 10 outputs.

3.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       10
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

3.22.3. Extracting gate netlist of module `\aluuu' to `<abc-temp-dir>/input.blif'..
Extracted 175 gates and 263 wires to a netlist network with 87 inputs and 20 outputs.

3.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:                OR cells:       61
ABC RESULTS:               MUX cells:       10
ABC RESULTS:             ORNOT cells:       14
ABC RESULTS:            ANDNOT cells:       77
ABC RESULTS:        internal signals:      156
ABC RESULTS:           input signals:       87
ABC RESULTS:          output signals:       20
Removing temp directory.

3.22.4. Extracting gate netlist of module `\arilef' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.5. Extracting gate netlist of module `\aririi' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.6. Extracting gate netlist of module `\comp_10' to `<abc-temp-dir>/input.blif'..
Extracted 95 gates and 115 wires to a netlist network with 20 inputs and 3 outputs.

3.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.6.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:       10
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       18
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:                OR cells:       44
ABC RESULTS:        internal signals:       92
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:        3
Removing temp directory.

3.22.7. Extracting gate netlist of module `\fa1' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

3.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.7.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.8. Extracting gate netlist of module `\ha' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

3.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.8.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

3.22.9. Extracting gate netlist of module `\multi_10' to `<abc-temp-dir>/input.blif'..
Extracted 100 gates and 120 wires to a netlist network with 20 inputs and 100 outputs.

3.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      100
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:      100
Removing temp directory.

3.22.10. Extracting gate netlist of module `\orie' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 30 wires to a netlist network with 20 inputs and 10 outputs.

3.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.10.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       10
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

3.22.11. Extracting gate netlist of module `\sub_10' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 10 outputs.

3.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.11.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       10
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       10
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..
Removed 0 unused cells and 469 unused wires.
<suppressed ~8 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \aluuu
Used module:     \adder_10
Used module:         \fa1
Used module:             \ha
Used module:     \arilef
Used module:     \aririi
Used module:     \adie
Used module:     \comp_10
Used module:     \multi_10
Used module:     \orie
Used module:     \sub_10

3.24.2. Analyzing design hierarchy..
Top module:  \aluuu
Used module:     \adder_10
Used module:         \fa1
Used module:             \ha
Used module:     \arilef
Used module:     \aririi
Used module:     \adie
Used module:     \comp_10
Used module:     \multi_10
Used module:     \orie
Used module:     \sub_10
Removed 0 unused modules.

3.25. Printing statistics.

=== adder_10 ===

   Number of wires:                  4
   Number of wire bits:             40
   Number of public wires:           4
   Number of public wire bits:      40
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     fa1                            10

=== adie ===

   Number of wires:                  3
   Number of wire bits:             30
   Number of public wires:           3
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $_AND_                         10

=== aluuu ===

   Number of wires:                160
   Number of wire bits:            275
   Number of public wires:          12
   Number of public wire bits:     127
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                175
     $_ANDNOT_                      77
     $_AND_                          1
     $_MUX_                         10
     $_NAND_                         3
     $_NOT_                          1
     $_ORNOT_                       14
     $_OR_                          61
     adder_10                        1
     adie                            1
     arilef                          1
     aririi                          1
     comp_10                         1
     multi_10                        1
     orie                            1
     sub_10                          1

=== arilef ===

   Number of wires:                  2
   Number of wire bits:             20
   Number of public wires:           2
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== aririi ===

   Number of wires:                  2
   Number of wire bits:             20
   Number of public wires:           2
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== comp_10 ===

   Number of wires:                 93
   Number of wire bits:            113
   Number of public wires:           3
   Number of public wire bits:      23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 93
     $_ANDNOT_                      20
     $_NOR_                          1
     $_NOT_                         18
     $_OR_                          44
     $_XOR_                         10

=== fa1 ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           8
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_OR_                           1
     ha                              2

=== ha ===

   Number of wires:                  4
   Number of wire bits:              4
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $_AND_                          1
     $_XOR_                          1

=== multi_10 ===

   Number of wires:                264
   Number of wire bits:            301
   Number of public wires:         165
   Number of public wire bits:     202
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                190
     $_AND_                        100
     fa1                            80
     ha                             10

=== orie ===

   Number of wires:                  3
   Number of wire bits:             30
   Number of public wires:           3
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $_OR_                          10

=== sub_10 ===

   Number of wires:                  5
   Number of wire bits:             51
   Number of public wires:           5
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $_NOT_                         10
     fa1                            10

=== design hierarchy ===

   aluuu                             1
     adder_10                        1
       fa1                          10
         ha                          2
     adie                            1
     arilef                          1
     aririi                          1
     comp_10                         1
     multi_10                        1
       fa1                          80
         ha                          2
       ha                           10
     orie                            1
     sub_10                          1
       fa1                          10
         ha                          2

   Number of wires:               2176
   Number of wire bits:           2520
   Number of public wires:        1839
   Number of public wire bits:    2183
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                910
     $_ANDNOT_                      97
     $_AND_                        321
     $_MUX_                         10
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                         29
     $_ORNOT_                       14
     $_OR_                         215
     $_XOR_                        220

3.26. Executing CHECK pass (checking for obvious problems).
Checking module adder_10...
Checking module adie...
Checking module aluuu...
Checking module arilef...
Checking module aririi...
Checking module comp_10...
Checking module fa1...
Checking module ha...
Checking module multi_10...
Checking module orie...
Checking module sub_10...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\adder_10':
Mapping DFF cells in module `\adie':
Mapping DFF cells in module `\aluuu':
Mapping DFF cells in module `\arilef':
Mapping DFF cells in module `\aririi':
Mapping DFF cells in module `\comp_10':
Mapping DFF cells in module `\fa1':
Mapping DFF cells in module `\ha':
Mapping DFF cells in module `\multi_10':
Mapping DFF cells in module `\orie':
Mapping DFF cells in module `\sub_10':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aluuu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \arilef..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \aririi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fa1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ha..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multi_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \orie..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_10.
  Optimizing cells in module \adie.
  Optimizing cells in module \aluuu.
  Optimizing cells in module \arilef.
  Optimizing cells in module \aririi.
  Optimizing cells in module \comp_10.
  Optimizing cells in module \fa1.
  Optimizing cells in module \ha.
  Optimizing cells in module \multi_10.
  Optimizing cells in module \orie.
  Optimizing cells in module \sub_10.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_10'.
Finding identical cells in module `\adie'.
Finding identical cells in module `\aluuu'.
Finding identical cells in module `\arilef'.
Finding identical cells in module `\aririi'.
Finding identical cells in module `\comp_10'.
Finding identical cells in module `\fa1'.
Finding identical cells in module `\ha'.
Finding identical cells in module `\multi_10'.
Finding identical cells in module `\orie'.
Finding identical cells in module `\sub_10'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_10..
Finding unused cells or wires in module \adie..
Finding unused cells or wires in module \aluuu..
Finding unused cells or wires in module \arilef..
Finding unused cells or wires in module \aririi..
Finding unused cells or wires in module \comp_10..
Finding unused cells or wires in module \fa1..
Finding unused cells or wires in module \ha..
Finding unused cells or wires in module \multi_10..
Finding unused cells or wires in module \orie..
Finding unused cells or wires in module \sub_10..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_10.
Optimizing module adie.
Optimizing module aluuu.
Optimizing module arilef.
Optimizing module aririi.
Optimizing module comp_10.
Optimizing module fa1.
Optimizing module ha.
Optimizing module multi_10.
Optimizing module orie.
Optimizing module sub_10.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\adder_10' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.2. Extracting gate netlist of module `\adie' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 30 wires to a netlist network with 20 inputs and 10 outputs.

6.2.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       10
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

6.3. Extracting gate netlist of module `\aluuu' to `<abc-temp-dir>/input.blif'..
Extracted 167 gates and 254 wires to a netlist network with 87 inputs and 20 outputs.

6.3.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:        7
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI22X1 cells:       16
ABC RESULTS:           AOI21X1 cells:        7
ABC RESULTS:           AOI22X1 cells:       14
ABC RESULTS:           NAND3X1 cells:       17
ABC RESULTS:             INVX1 cells:       42
ABC RESULTS:           NAND2X1 cells:        4
ABC RESULTS:           OAI21X1 cells:        4
ABC RESULTS:            AND2X2 cells:       10
ABC RESULTS:        internal signals:      147
ABC RESULTS:           input signals:       87
ABC RESULTS:          output signals:       20
Removing temp directory.

6.4. Extracting gate netlist of module `\arilef' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.5. Extracting gate netlist of module `\aririi' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.6. Extracting gate netlist of module `\comp_10' to `<abc-temp-dir>/input.blif'..
Extracted 93 gates and 113 wires to a netlist network with 20 inputs and 3 outputs.

6.6.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.6.2. Re-integrating ABC results.
ABC RESULTS:           XNOR2X1 cells:        7
ABC RESULTS:             INVX1 cells:       22
ABC RESULTS:           NAND2X1 cells:       12
ABC RESULTS:            NOR2X1 cells:       12
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        5
ABC RESULTS:            AND2X2 cells:        5
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:        internal signals:       90
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:        3
Removing temp directory.

6.7. Extracting gate netlist of module `\fa1' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

6.7.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.7.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

6.8. Extracting gate netlist of module `\ha' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

6.8.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.51 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.8.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:            NOR2X1 cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

6.9. Extracting gate netlist of module `\multi_10' to `<abc-temp-dir>/input.blif'..
Extracted 100 gates and 120 wires to a netlist network with 20 inputs and 100 outputs.

6.9.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.9.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:      100
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:      100
Removing temp directory.

6.10. Extracting gate netlist of module `\orie' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 30 wires to a netlist network with 20 inputs and 10 outputs.

6.10.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.10.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:       10
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       10
Removing temp directory.

6.11. Extracting gate netlist of module `\sub_10' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 20 wires to a netlist network with 10 inputs and 10 outputs.

6.11.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.11.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       10
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Deleting now unused module adder_10.
Deleting now unused module adie.
Deleting now unused module arilef.
Deleting now unused module aririi.
Deleting now unused module comp_10.
Deleting now unused module fa1.
Deleting now unused module ha.
Deleting now unused module multi_10.
Deleting now unused module orie.
Deleting now unused module sub_10.
<suppressed ~120 debug messages>

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 2 unused cells and 3011 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port aluuu.a: Missing option -inpad.
Don't map input port aluuu.b: Missing option -inpad.
Don't map input port aluuu.sel: Missing option -inpad.
Mapping port aluuu.y using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module aluuu.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aluuu'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \aluuu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \aluuu.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\aluuu'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \aluuu..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module aluuu.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== aluuu ===

   Number of wires:               1026
   Number of wire bits:           1123
   Number of public wires:        1026
   Number of public wire bits:    1123
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1081
     AND2X2                        335
     AOI21X1                        15
     AOI22X1                        14
     BUFX2                          20
     INVX1                          74
     NAND2X1                        16
     NAND3X1                        22
     NOR2X1                        439
     NOR3X1                          1
     OAI21X1                        12
     OAI22X1                        16
     OR2X2                         110
     XNOR2X1                         7

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 93290004c1, CPU: user 0.57s system 0.05s, MEM: 28.12 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 58% 2x abc (0 sec), 7% 18x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef
Cleaning up output syntax
ypostproc.tcl aluuu_mapped.blif aluuu /usr/local/share/qflow/tech/osu035/osu035.sh vdd gnd 
Cleaning up blif file syntax
blifFanout not run:  No cell size optimization.

Generating RTL verilog and SPICE netlist file in directory
	 /home/kor-tac/Desktop/physical/alu/synthesis
Files:
   Verilog: /home/kor-tac/Desktop/physical/alu/synthesis/aluuu.rtl.v
   Verilog: /home/kor-tac/Desktop/physical/alu/synthesis/aluuu.rtlnopwr.v
   Verilog: /home/kor-tac/Desktop/physical/alu/synthesis/aluuu.rtlbb.v
   Spice:   /home/kor-tac/Desktop/physical/alu/synthesis/aluuu.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" aluuu.spc aluuu.xspice

Synthesis script ended on Wed Jul 2 05:12:47 PM IST 2025
